{"version":3,"sources":["Timer/TimerHooks.js","Timer/InfiniteTimerHooks.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","useState","time","setTime","autostart","step","paused","setIsPaused","useEffect","intervalID","setInterval","decreaseTimer","onTick","clearInterval","onTimeEnd","className","timeInSeconds","sec","min","formatTimer","onClick","onTimeStart","onTimePause","style","backgroundColor","width","InfiniteTimer","TimerHooks","console","log","type","max","value","onChange","event","newTime","target","timers","App","map","timer","index","InfiniteTimerHooks","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAwDeA,MAtDf,SAAeC,GAAO,IAAD,EAEMC,mBAASD,EAAME,MAFrB,mBAEXA,EAFW,KAELC,EAFK,OAGgBF,mBAASD,EAAMI,WAH/B,gCAIMH,mBAASD,EAAMK,OAJrB,mBAIXA,EAJW,aAKYJ,oBAAUD,EAAMI,YAL5B,mBAKXE,EALW,KAKHC,EALG,KAOjBC,qBAAU,WAEN,IAAMC,EAAaC,YAAYC,EAAeN,GAG9C,OADAL,EAAMY,OAAOV,EAAO,KACb,WAEHW,cAAcJ,OAItB,IAAME,EAAgB,WACdL,IACAH,EAAQD,EAAOG,GACH,IAATH,IACCF,EAAMc,YACNX,EAAQH,EAAME,SAiB1B,OACI,yBAAKa,UAAU,SACX,8BATY,WAChB,IAAMC,EAAgBd,EAAO,IACvBe,EAAMD,EAAgB,GACtBE,GAAOF,EAAgBC,GAAO,GACpC,MAAM,GAAN,OAAUC,EAAM,EAAIA,EAAM,IAAMA,EAAhC,cAAyCD,EAAM,EAAIA,EAAM,IAAMA,GAKpDE,IACP,4BAAQC,QAfI,WAChBd,EAASN,EAAMqB,cAAgBrB,EAAMsB,cACrCf,GAAaD,IAcDiB,MAAO,CAACC,gBAAgB,GAAD,OAAKlB,EAAS,mBAAqB,YACrDA,EAAS,QAAU,SAEhC,yBAAKS,UAAU,gBAAgBQ,MAAO,CAACC,gBAAgB,GAAD,OAAc,IAATtB,EAAa,MAAQ,WAC5E,yBAAKa,UAAU,QAAQQ,MAAO,CAACE,MAAM,GAAD,OAAK,IAAMzB,EAAME,KAAOA,EAAxB,WChBrCwB,MA/Bf,SAAuB1B,GAAO,IAAD,EACDC,mBAASD,EAAME,MADd,mBAClBA,EADkB,KACZC,EADY,KAgBzB,OACI,yBAAKY,UAAU,kBACX,kBAACY,EAAD,CAAYzB,KAAMA,EACNE,UAAWJ,EAAMI,UACjBC,KAAML,EAAMK,KACZO,OAlBL,SAACV,GACTA,GAAQ,GACP0B,QAAQC,IAAI,0FAAsB3B,IAiBtBY,UAdF,kBAAMc,QAAQC,IAAI,6DAehBR,YAdA,kBAAMO,QAAQC,IAAI,2FAelBP,YAdA,kBAAMM,QAAQC,IAAI,wFAgB9B,2BAAOC,KAAK,SAASZ,IAAI,IAAIa,IAAI,MAAMC,MAAO9B,EAAO,IAAM+B,SAf9C,SAACC,GAClB,IAAMC,EAAUD,EAAME,OAAOJ,MAC7B7B,EAAkB,IAAVgC,QCZVE,EAAS,CAAC,CACdnC,KAAM,IACNE,WAAW,EACXC,KAAM,KACL,CACDH,KAAM,IACNE,WAAW,EACXC,KAAM,KACL,CACDH,KAAM,IACNE,WAAW,EACXC,KAAM,MAiBOiC,MAdf,WACE,OACE,yBAAKvB,UAAU,OACZsB,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACV,kBAACC,EAAD,CAAoBxC,KAAMsC,EAAMtC,KACZE,UAAWoC,EAAMpC,UACjBC,KAAMmC,EAAMnC,KACZsC,IAAKF,SCbbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.c4bc9eb2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer(props){\r\n    \r\n    const[time, setTime] = useState(props.time);\r\n    const[autostart, setAutostart] = useState(props.autostart);\r\n    const[step, setStep] = useState(props.step);\r\n    const[paused, setIsPaused] = useState(!props.autostart);\r\n\r\n    useEffect(() => {\r\n        //componentDidMount\r\n        const intervalID = setInterval(decreaseTimer, step);\r\n        //componentDidUpdate\r\n        props.onTick(time / 1000);\r\n        return () => {\r\n            //componentWillUnmount\r\n            clearInterval(intervalID);\r\n        }\r\n    })\r\n\r\n    const decreaseTimer = () => {\r\n        if(!paused){\r\n            setTime(time - step);\r\n            if(time === 0){\r\n                props.onTimeEnd();\r\n                setTime(props.time);\r\n            }\r\n        }       \r\n    }\r\n\r\n    const pauseToggle = () => {\r\n        paused ? props.onTimeStart() : props.onTimePause();\r\n        setIsPaused(!paused)\r\n    }\r\n    \r\n    const formatTimer = () => {\r\n        const timeInSeconds = time / 1000;\r\n        const sec = timeInSeconds % 60;\r\n        const min = (timeInSeconds - sec) / 60;\r\n        return `${min > 9 ? min : \"0\" + min} : ${sec > 9 ? sec : \"0\" + sec}`;\r\n    }\r\n\r\n    return(\r\n        <div className=\"timer\">\r\n            <span>{formatTimer()}</span>\r\n            <button onClick={pauseToggle} \r\n                    style={{backgroundColor: `${paused ? \"rgb(10, 236, 10)\" : \"yellow\"}`}}>\r\n                        {paused ? \"Start\" : \"Pause\"}\r\n            </button>\r\n            <div className=\"scale-wrapper\" style={{backgroundColor: `${time === 0 ? \"red\" : \"white\"}`}}>\r\n                <div className=\"scale\" style={{width: `${100 / props.time * time}%`}}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React, { useState } from 'react';\r\nimport TimerHooks from './TimerHooks';\r\n\r\nfunction InfiniteTimer(props){\r\n    const [time, setTime] = useState(props.time);\r\n\r\n    const onTick = (time) => {\r\n        if(time >= 0){\r\n            console.log(\"Залишилось часу: \" + time);\r\n        }\r\n    }\r\n    const onTimeEnd = () => console.log(\"Час вийшов!\");\r\n    const onTimeStart = () => console.log(\"Таймер запущено!\");\r\n    const onTimePause = () => console.log(\"Таймер на паузі!\");\r\n    const onTimeChange = (event) => {\r\n        const newTime = event.target.value;\r\n        setTime(newTime * 1000);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"infinite-timer\">\r\n            <TimerHooks time={time} \r\n                        autostart={props.autostart}\r\n                        step={props.step}\r\n                        onTick={onTick}\r\n                        onTimeEnd={onTimeEnd}\r\n                        onTimeStart={onTimeStart}\r\n                        onTimePause={onTimePause}     \r\n            />\r\n            <input type=\"number\" min=\"1\" max=\"100\" value={time / 1000} onChange={onTimeChange} />   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfiniteTimer;","import React from 'react';\nimport './App.css';\nimport InfiniteTimerHooks from './Timer/InfiniteTimerHooks';\n\nconst timers = [{\n  time: 5000,\n  autostart: true,\n  step: 1000\n}, {\n  time: 10000,\n  autostart: false,\n  step: 2000\n}, {\n  time: 20000,\n  autostart: false,\n  step: 100\n}];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {timers.map((timer, index) => (\n        <InfiniteTimerHooks time={timer.time}\n                            autostart={timer.autostart}\n                            step={timer.step}\n                            key={index}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}