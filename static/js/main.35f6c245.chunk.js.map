{"version":3,"sources":["Timer/Timer.js","Timer/InfiniteTimer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","time","props","autostart","step","paused","decreaseTimer","setState","prevState","onTimeEnd","setTimeout","pauseToggle","onTimeStart","onTimePause","formatTimer","sec","min","interval","this","setInterval","nextProps","nextState","onTick","clearInterval","className","onClick","style","backgroundColor","width","Component","InfiniteTimer","console","log","timeLeft","onTimeChange","event","newTime","target","value","type","max","onChange","timers","App","map","timer","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35f6c245.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Timer extends Component{\r\n    state = {\r\n        time: this.props.time,\r\n        autostart: this.props.autostart,\r\n        step: this.props.step,\r\n        paused: !this.props.autostart\r\n    }\r\n\r\n    componentDidMount(){\r\n        let interval = 1000;\r\n        if(this.state.step < 1000){\r\n            interval = this.state.step;\r\n        }\r\n        this.interval = setInterval(this.decreaseTimer, interval);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){   \r\n        return !(nextState.time % this.state.step);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.props.onTick(this.state.time / 1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    decreaseTimer = () => {\r\n        if(!this.state.paused){   \r\n            this.setState((prevState) => {\r\n                if(this.state.step >= 1000){\r\n                    return {\r\n                        time: prevState.time - 1000\r\n                    }\r\n                } else {\r\n                    return {\r\n                        time: prevState.time - this.state.step\r\n                    }\r\n                }\r\n                \r\n            });\r\n            if(this.state.time === 0){\r\n                this.props.onTimeEnd();\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        time: this.props.time                  \r\n                    })\r\n                }, this.state.step >= 1000 ? 1000 : this.state.step);\r\n            }\r\n        }       \r\n    }\r\n\r\n    pauseToggle = () => {\r\n        this.state.paused ? this.props.onTimeStart() : this.props.onTimePause();\r\n        this.setState((prevState) => {\r\n            return {\r\n                paused: !prevState.paused\r\n            }\r\n        });\r\n    }\r\n    \r\n    formatTimer = () => {\r\n        const time = this.state.time / 1000;\r\n        const sec = time % 60;\r\n        const min = (time - sec) / 60;\r\n        return `${min > 9 ? min : \"0\" + min} : ${sec > 9 ? sec : \"0\" + sec}`;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"timer\">\r\n                <span>{this.formatTimer()}</span>\r\n                <button onClick={this.pauseToggle} \r\n                        style={{backgroundColor: `${this.state.paused ? \"rgb(10, 236, 10)\" : \"yellow\"}`}}>\r\n                            {this.state.paused ? \"Start\" : \"Pause\"}\r\n                </button>\r\n                <div className=\"scale-wrapper\" style={{backgroundColor: `${this.state.time === 0 ? \"red\" : \"white\"}`}}>\r\n                    <div className=\"scale\" style={{width: `${100/this.props.time*this.state.time}%`}}></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Timer from './Timer';\r\n\r\nexport default class InfiniteTimer extends Component{\r\n    state = {\r\n        time: this.props.time\r\n    }\r\n\r\n    onTick = (time) => {\r\n        if(time >= 0){\r\n            console.log(\"Залишилось часу: \" + time);\r\n        }\r\n    }\r\n    onTimeEnd = () => console.log(\"Час вийшов!\");\r\n    onTimeStart = (timeLeft) => console.log(\"Таймер запущено!\");\r\n    onTimePause = (timeLeft) => console.log(\"Таймер на паузі!\");\r\n    onTimeChange = (event) => {\r\n        const newTime = event.target.value;\r\n        this.setState({\r\n            time: newTime * 1000\r\n        });\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"infinite-timer\">\r\n                <Timer  time={this.state.time} \r\n                        autostart={this.props.autostart}\r\n                        step={this.props.step}\r\n                        onTick={this.onTick}\r\n                        onTimeEnd={this.onTimeEnd}\r\n                        onTimeStart={this.onTimeStart}\r\n                        onTimePause={this.onTimePause}     \r\n                />\r\n                <input type=\"number\" min=\"1\" max=\"100\" value={this.state.time / 1000} onChange={this.onTimeChange} />   \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport InfiniteTimer from './Timer/InfiniteTimer';\n\nconst timers = [{\n  time: 5000,\n  autostart: true,\n  step: 1000\n}, {\n  time: 10000,\n  autostart: false,\n  step: 2000\n}, {\n  time: 20000,\n  autostart: false,\n  step: 100\n}];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {timers.map((timer, index) => (\n        <InfiniteTimer  time={timer.time}\n                        autostart={timer.autostart}\n                        step={timer.step}\n                        key={index}\n        />\n      )\n      )}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}